<?php

/**
 * @file
 * Main module file of Password Policy.
 */

declare(strict_types = 1);

use \Drupal\Core\Form\FormStateInterface;
use \Drupal\password_policy\Interfaces\PasswordPolicySettingsInterface;

/**
 * Implements hook_form_FORM_ID_alter() for user_form().
 */
function password_policy_form_user_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $config = \Drupal::service('config.factory')->get('password_policy.settings');
  $info = '';
  $infoArray = [];
  if (!empty($config->get('min_character_length'))) {
    $infoArray[] = t(PasswordPolicySettingsInterface::MIN_CHARACTER_LENGTH);
  }
  if (!empty($config->get('digit_characters'))) {
    $infoArray[] = t(PasswordPolicySettingsInterface::DIGIT_CHARACTERS);
  }
  if (!empty($config->get('lowercased_characters'))) {
    $infoArray[] = t(PasswordPolicySettingsInterface::LOWERCASED_CHARACTERS);
  }
  if (!empty($config->get('uppercased_characters'))) {
    $infoArray[] = t(PasswordPolicySettingsInterface::UPPERCASED_CHARACTERS);
  }
  if (!empty($config->get('special_characters'))) {
    $infoArray[] = t(PasswordPolicySettingsInterface::SPECIAL_CHARACTERS);
  }
  if (count($infoArray)) {
    $info .= '<br><ul>';
    foreach ($infoArray as $item) {
      $info .= '<li><b>' . $item . '</b></li>';
    }
    $info .= '</ul>';
  }
  $form['account']['pass']['#description'] .= $info;
  $form['#validate'][] = '_password_policy_change_pass_validation';
}

/**
 * Setting Error info if defined password strength is not satisfied.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function _password_policy_change_pass_validation(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::service('config.factory')->get('password_policy.settings');
  $newPass = $form_state->getValue('pass');
  if (!empty($config->get('min_character_length')) && mb_strlen($newPass) < 8) {
    $form_state->setErrorByName('val1', t(PasswordPolicySettingsInterface::MIN_CHARACTER_LENGTH));
  }
  if (!empty($config->get('digit_characters')) && (preg_match('/\d/', $newPass) !== 1)) {
    $form_state->setErrorByName('val2', t(PasswordPolicySettingsInterface::DIGIT_CHARACTERS));
  }
  if (!empty($config->get('lowercased_characters')) && (preg_match('/\p{Ll}/u', $newPass) !== 1)) {
    $form_state->setErrorByName('val3', t(PasswordPolicySettingsInterface::LOWERCASED_CHARACTERS));
  }
  if (!empty($config->get('uppercased_characters')) && (preg_match('/\p{Lu}/u', $newPass) !== 1)) {
    $form_state->setErrorByName('val4', t(PasswordPolicySettingsInterface::UPPERCASED_CHARACTERS));
  }
  if (!empty($config->get('special_characters')) && (preg_match('/[^\p{Ll}\p{Lu}0-9]+/u', $newPass) !== 1)) {
    $form_state->setErrorByName('val5', t(PasswordPolicySettingsInterface::SPECIAL_CHARACTERS));
  }
}
